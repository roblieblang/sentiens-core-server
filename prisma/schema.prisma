// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(uuid())
  email              String              @unique
  name               String
  password           String?
  isAdmin            Boolean             @default(false)
  themePreference    String
  createdAt          DateTime            @default(now())
  lastLogin          DateTime?
  journalEntries     JournalEntry[]
  sentimentFeedbacks SentimentFeedback[]
  sessions           Session[]
  Cache              Cache[]
}

model JournalEntry {
  id                Int                 @id @default(autoincrement())
  userId            String
  content           String
  sentimentScore    Float
  sentimentLabels   String
  tags              String // JSON serialized array of tags
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  user              User                @relation(fields: [userId], references: [id])
  sentimentFeedback SentimentFeedback[]
}

model SentimentFeedback {
  id               Int          @id @default(autoincrement())
  journalEntryId   Int
  accuracyFeedback Boolean
  createdAt        DateTime     @default(now())
  journalEntry     JournalEntry @relation(fields: [journalEntryId], references: [id])
  User             User?        @relation(fields: [userId], references: [id])
  userId           String?
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
}

model Cache {
  id        Int      @id @default(autoincrement())
  userId    String
  dataType  String
  data      String // JSON serialized data
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    String
  token     String
  createdAt DateTime @default(now())
  expiredAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}
